# ========================================
# GUIDE : GitHub Actions pour Front & Back
# ========================================
# Ce fichier va dans : .github/workflows/ci.yml
#
# ðŸŽ¯ OBJECTIF : Comprendre comment structurer un pipeline CI/CD
# plutÃ´t que copier-coller du code sans comprendre !

name: CI Pipeline

# ========================================
# 1. QUAND DÃ‰CLENCHER LE WORKFLOW ?
# ========================================
# TODO: RÃ©flÃ©chis Ã  QUAND tu veux que ce workflow se lance
# Options courantes :
#   - Ã€ chaque push sur certaines branches ?
#   - Ã€ chaque pull request ?
#   - Manuellement ?

on:
  push:
    branches: [main] # ðŸ’¡ ADAPTER selon tes branches
  pull_request:
    branches: [main]

# ========================================
# 2. DÃ‰FINIR LES JOBS
# ========================================
# Un workflow peut avoir plusieurs "jobs" qui tournent en parallÃ¨le
# Ici on va sÃ©parer Frontend et Backend

jobs:
  # ========================================
  # JOB 1 : Frontend
  # ========================================
  frontend:
    name: "Frontend CI"
    runs-on: ubuntu-latest # ðŸ’¡ L'environnement oÃ¹ Ã§a tourne

    # OPTION : Si ton front est dans un sous-dossier
    defaults:
      run:
        working-directory: ../client

    steps:
      # Ã‰tape 1 : RÃ©cupÃ©rer le code
      - name: Checkout code
        uses: actions/checkout@v4

      # Ã‰tape 2 : Configurer Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20" # ðŸ’¡ ADAPTER Ã  ta version de Node
          # cache: 'npm'  # ðŸ’¡ DÃ‰COMMENTER pour accÃ©lÃ©rer les installs

      # Ã‰tape 3 : Installer les dÃ©pendances
      # ðŸ’¡ EXEMPLE COMPLET pour comprendre la structure
      - name: Install dependencies
        run: npm ci
        # Notes :
        # - npm ci est plus strict que npm install
        # - Il nÃ©cessite un package-lock.json
        # - Il supprime node_modules avant d'installer
        # - IdÃ©al pour CI/CD car reproductible

      # ========================================
      # Ã€ TOI DE JOUER ! ComplÃ¨te les Ã©tapes suivantes
      # ========================================

      # Ã‰tape 4 : VÃ©rifier les vulnÃ©rabilitÃ©s
      # ðŸ’¡ INDICES :
      #   - Il existe une commande npm pour auditer les packages
      #   - Tu peux dÃ©finir un niveau de sÃ©vÃ©ritÃ© minimum (low, moderate, high, critical)
      #   - Question : veux-tu que le build Ã©choue si des vulnÃ©rabilitÃ©s sont trouvÃ©es ?
      #   - Regarde "continue-on-error" dans la doc GitHub Actions
      - name: Security audit
        run: npm audit --audit-level=moderate
      # Ã‰tape 5 : Linting
      # ðŸ’¡ INDICES :
      #   - Ton package.json doit avoir un script "lint"
      #   - ESLint, Prettier, ou autre ? VÃ©rifie ton projet
      #   - Tu peux aussi auto-fix certaines erreurs (mais attention en CI !)
      - name: Run linter
        run: npm run lint

      # Ã‰tape 6 : Type checking (TypeScript)
      # ðŸ’¡ INDICES :
      #   - Si tu as un tsconfig.json, tu as besoin de cette Ã©tape
      #   - Tu peux lancer le compilateur TypeScript sans gÃ©nÃ©rer de fichiers
      #   - Option : utilise un script npm ou appelle directement tsc
      - name: Type check
        run: npx tsc --noEmit

      # Ã‰tape 7 : Build
      # ðŸ’¡ INDICES :
      #   - Vite ? Next.js ? Create React App ? La commande diffÃ¨re
      #   - VÃ©rifie ton package.json pour le script de build
      #   - Tu peux avoir besoin de variables d'environnement (API URLs, etc.)
      - name: Build application
        run: npm run build
        env:
          # TODO: Variables d'environnement pour le build (ex: NODE_ENV)
          NODE_ENV: production

  # ========================================
  # JOB 2 : Backend
  # ========================================
  backend:
    name: "Backend CI"
    runs-on: ubuntu-latest

    # OPTION : Si ton back est dans un sous-dossier
    # defaults:
    #   run:
    #     working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Installer Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Ã‰tape 3 : Installer les dÃ©pendances (mÃªme principe que le frontend)
      - name: Install dependencies
        run: python -m pip install --upgrade pip && pip install -r requirements.txt

      # ========================================
      # Maintenant Ã  toi ! MÃªme logique que le frontend
      # ========================================

      - name: Security audit
        run: safety check
      - name: Lint code with pylint
        run: pylint .
      - name: Check code format with black
        run: black --check .
      - name: Check import sorting with isort
        run: isort . --check-only
      - name: Run Django tests
        run: python manage.py test
      - name: Build application
        run: echo "No build step needed"
